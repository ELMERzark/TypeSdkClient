// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;


// sdk发送的事件类型
public enum TypeEventType
{

/**error*/
	EVENT_ERROR					=0,
/**成功登陆 消息 发送 TypeOCLoginData 类型数据*/
	EVENT_LOGIN_SUCCESS 		=1 ,
/**获得 支付结果消息 发送 TypeOCPayResultData 类型数据*/
	EVENT_PAY_RESULT 		    =2,
	/**用户登出消息 */
	EVENT_LOGOUT          		=3,
/**平台更新检测完毕*/
	EVENT_UPDATE_FINISH   		=4,
	/***SDK的init函数执行完毕后消息*/
	EVENT_INIT_FINISH			=5,
	/**SDK重新登录成功后，需要重新格式化游戏消息*/
	EVENT_RELOGIN				=6,
	/**取消退出游戏行为返回游戏界面*/
	EVENT_CANCEL_EXIT_GAME		=7,
	/**收到本地推送通知*/
	EVENT_RECEIVE_LOCAL_PUSH	=8,
	/**收到分享的结果*/
	EVENT_SHARE_RESULT			=9,
	/**收到好友列表的结果*/
	EVENT_GET_FRIEND_RESULT 	=10,
	/*额外功能通知 */
	Event_EXTRA_FUNCTION = 11

}

//用作被继承的基本数据类型
public class U3DTypeBaseData
{
    private static int ins_key_count = 0;
    private Dictionary<string, object> _attMap = null;
    public U3DTypeBaseData()
    {
        if (null == _attMap) _attMap = new Dictionary<string, object>();
        SetData("data_ins_key", ins_key_count.ToString());
        ins_key_count++;
    }
    public Dictionary<string,object> attMap()
    {
        return _attMap;
    }
    public void SetData(string attName, GDEPushRepeatIntervalType enumValue)
    {
        this.SetData(attName, (int)enumValue);
    }
    /**设置一个boolean值*/
    public void SetData(string attName, Boolean boolValue)
    {
        if (boolValue)
            this.SetData(attName, "1");
        else
            this.SetData(attName, "0");
    }
    /**设置一个int值*/
    public void SetData(string attName, int intValue)
    {
        this.SetData(attName, intValue + "");
    }

    /// <summary>
    /// 设置一个string值
    /// </summary>
    public void SetData(string attName, string attValue)
    {
        if (null == _attMap) _attMap = new Dictionary<string, object>();

        if (_attMap.ContainsKey(attName))
            _attMap[attName] = attValue;
        else
            _attMap.Add(attName, attValue);

    }
    /**
	 * GET String Data 
	 * 
	 */
    public string GetData(string attName)
    {
        if (null == _attMap) _attMap = new Dictionary<string, object>();
        string outStr = "";

        if (_attMap.ContainsKey(attName))
            outStr = _attMap[attName].ToString();

        return outStr;

    }
    /***
	 * Get int data
	 * 
	 */
    public int GetInt(string attName)
    {
        string value = GetData(attName);
        return int.Parse(value);
    }
    /***
	 * get bool data ; 0 is false else is true
	 */
    public bool GetBool(string attName)
    {
        int value = GetInt(attName);
        if (0 == value)
            return false;
        else
            return true;
    }
    public string DataToString()
    {
        if (null == _attMap) _attMap = new Dictionary<string, object>();

        string outStr = MiniJSON.Json.Serialize(_attMap);
        return outStr;
    }
    public void StringToData(string _in_data)
    {
        if (null == _attMap) _attMap = new Dictionary<string, object>();
        _attMap.Clear();
        if (null == _in_data || "" == _in_data)
            _in_data = "{}";


        _attMap = MiniJSON.Json.Deserialize(_in_data) as Dictionary<string, object>;

        System.Console.Write(_attMap.ToString());
    }
    public void copyData(U3DTypeBaseData _in_data)
    {
        StringToData(_in_data.DataToString());
    }
    public void freshSign()
    {
        string cacheStr = "";
        foreach (string key in _attMap.Keys)
        {
            if ("data_ins_key" == key)
                continue;

            cacheStr += _attMap[key].ToString()+"|";
        }
		cacheStr = TypeSDKTool.StringTool.MD5StringByString (cacheStr);
        this.SetData("sign", cacheStr);
    }
}

//
//Event Arguments类
public class U3DTypeEvent:EventArgs
{
	/// <summary>
	/// The type of the evt.
	/// </summary>
	public TypeEventType evtType;
	/// <summary>
	/// The evt data.
	/// </summary>
	public U3DTypeBaseData evtData;
	/// <summary>
	/// Initializes a new instance of the <see cref="U3DTypeEvent"/> class.
	/// </summary>
	/// <param name="_in_type">_in_type.</param>
	/// <param name="_in_data">_in_data.</param>
	public U3DTypeEvent(TypeEventType _in_type,U3DTypeBaseData _in_data)
	{
		evtType = _in_type;
		evtData = _in_data;
	}
	public U3DTypeEvent(TypeEventType _in_type)
	{
		evtType = _in_type;
		evtData = null;
	}
}

/// 委托（delegate）的方法签名（method signature
public delegate void U3DTypeEventDelegate( U3DTypeEvent evt);


